import 'dart:io';
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import 'package:path_provider/path_provider.dart';
import 'package:camera/camera.dart';
import 'dart:typed_data';
import 'package:permission_handler/permission_handler.dart';
import 'package:sentry_flutter/sentry_flutter.dart';
import './logger.dart'; // Importando a classe Logger

class CameraWithQRScanner extends StatefulWidget {
  final Function(String) onQRCodeDetected;
  final Function(String) onPhotoTaken;

  const CameraWithQRScanner({
    Key? key,
    required this.onQRCodeDetected,
    required this.onPhotoTaken,
  }) : super(key: key);

  @override
  State<CameraWithQRScanner> createState() => _CameraWithQRScannerState();
}

class _CameraWithQRScannerState extends State<CameraWithQRScanner>
    with WidgetsBindingObserver {
  // Controladores para QR Scanner e C√¢mera
  MobileScannerController? _qrController;
  CameraController? _cameraController;
  List<CameraDescription>? _cameras;

  // Prefer√™ncia para a c√¢mera traseira
  static const preferredCameraDirection = CameraLensDirection.back;

  // Estados
  bool _isQRMode = false; // Come√ßar no modo c√¢mera por padr√£o
  bool _isProcessing = false;
  bool _isCameraInitialized = false;
  bool _hasCameraError = false;
  bool _previewReady = false;
  bool _attemptingPreviewFix = false;
  int _previewRetryCount = 0;
  bool _isQRScannerReady = false;
  bool _initialResetPerformed = false;

  // Controle de seguran√ßa para receivers
  bool _hasTooManyReceiversError = false;
  final int _maxInitAttempts = 2;
  int _initAttempts = 0;

  // Temporizador para auto-fechar em caso de inatividade
  Timer? _inactivityTimer;

  // Key para for√ßar reconstru√ß√£o do preview
  final GlobalKey _cameraPreviewKey = GlobalKey();
  final GlobalKey _qrScannerKey = GlobalKey();

  // Singleton para garantir que apenas uma inst√¢ncia seja criada
  static bool _isInstanceActive = false;

  @override
  void initState() {
    super.initState();

    // Verificar se j√° existe uma inst√¢ncia ativa
    if (_isInstanceActive) {
      debugPrint(
          '‚ö†Ô∏è Tentativa de abrir m√∫ltiplas inst√¢ncias da c√¢mera detectada');
      _hasCameraError = true;
      _showError(
          'J√° existe uma c√¢mera aberta. Feche a c√¢mera atual antes de abrir uma nova.');
      return;
    }

    // Marcar esta inst√¢ncia como ativa
    _isInstanceActive = true;

    WidgetsBinding.instance.addObserver(this);

    // Iniciar timer de inatividade
    _resetInactivityTimer();

    // Tentar inicializar a c√¢mera com delay para garantir que a UI esteja pronta
    Future.delayed(const Duration(milliseconds: 100), () {
      if (mounted) {
        _initializeCameraWithRetry();
      }
    });
  }

  // Criar um m√©todo para mostrar erros
  void _showError(String message) {
    if (!mounted) return;

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        duration: const Duration(seconds: 3),
        backgroundColor: Colors.red.shade800,
      ),
    );
  }

  // Timer para auto-fechamento por inatividade
  void _resetInactivityTimer() {
    _inactivityTimer?.cancel();
    _inactivityTimer = Timer(const Duration(seconds: 60), () {
      // Fechar automaticamente ap√≥s 60 segundos de inatividade
      if (mounted) {
        debugPrint('üïí Fechando c√¢mera por inatividade');
        Navigator.of(context).pop();
      }
    });
  }

  // Nova implementa√ß√£o de inicializa√ß√£o com tentativas
  Future<void> _initializeCameraWithRetry() async {
    if (!mounted) return;

    _initAttempts++;
    if (_initAttempts > _maxInitAttempts) {
      debugPrint('‚ùå Excedido n√∫mero m√°ximo de tentativas de inicializa√ß√£o');
      setState(() {
        _hasCameraError = true;
        _isProcessing = false;
      });
      _showError(
          'N√£o foi poss√≠vel inicializar a c√¢mera ap√≥s v√°rias tentativas. Tente reiniciar o aplicativo.');
      return;
    }

    debugPrint(
        'üîÑ Inicializando c√¢mera com retentativas autom√°ticas (tentativa $_initAttempts)');
    setState(() => _isProcessing = true);

    try {
      // Verificar se h√° muitos receivers registrados
      if (Platform.isAndroid) {
        // Capturar o erro de muitos receivers para exibir mensagem apropriada
        try {
          final cameras = await availableCameras().timeout(
            const Duration(seconds: 2),
            onTimeout: () {
              throw TimeoutException('Timeout ao obter c√¢meras dispon√≠veis');
            },
          );

          if (cameras.isEmpty) {
            throw Exception('Nenhuma c√¢mera dispon√≠vel');
          }
        } catch (e) {
          if (e.toString().contains('Too many receivers')) {
            _hasTooManyReceiversError = true;
            throw Exception(
                'Muitos receptores registrados. Reinicie o aplicativo para usar a c√¢mera.');
          } else {
            // Rethrow para tratamento normal
            rethrow;
          }
        }
      }

      // Verificar permiss√µes primeiro
      await _checkCameraPermissions();

      // Liberar recursos antes de tentar novamente
      await _safeDisposeControllersCompletely();

      // Tentar inicializar a c√¢mera normal primeiro
      await _initializeCamera(forceActivateStream: true);

      if (_isCameraInitialized) {
        debugPrint(
            '‚úÖ C√¢mera inicializada com sucesso na tentativa $_initAttempts');

        setState(() {
          _isProcessing = false;
          _previewReady = true;
          _hasCameraError = false;
        });

        // Garantir que o preview seja vis√≠vel
        _ensurePreviewIsVisible();
      } else {
        throw Exception('Falha ao inicializar c√¢mera');
      }
    } catch (e, stackTrace) {
      debugPrint('‚ùå Erro ao inicializar c√¢mera: $e');

      // Registrar no Logger em vez do Sentry diretamente
      await Logger.captureException(
        e,
        stackTrace: stackTrace,
        category: 'camera_init',
        extra: {'init_attempts': _initAttempts},
      );

      // Verificar se √© um erro de Too many receivers
      if (_hasTooManyReceiversError ||
          e.toString().contains('Too many receivers')) {
        setState(() {
          _hasCameraError = true;
          _isProcessing = false;
          _hasTooManyReceiversError = true;
        });

        _showError(
            'O aplicativo precisa ser reiniciado para usar a c√¢mera. Feche e abra o aplicativo novamente.');
      } else {
        setState(() {
          _hasCameraError = true;
          _isProcessing = false;
        });

        // Tentar novamente ap√≥s um atraso se n√£o for um erro de receivers
        if (_initAttempts < _maxInitAttempts && mounted) {
          Future.delayed(Duration(milliseconds: 800 * _initAttempts), () {
            if (mounted) {
              _initializeCameraWithRetry();
            }
          });
        } else {
          _showError(
              'N√£o foi poss√≠vel inicializar a c√¢mera. Tente novamente mais tarde.');
        }
      }
    }
  }

  // M√©todo para inicializar a c√¢mera com detec√ß√£o e tratamento do erro de Too many receivers
  Future<void> _initializeCamera({bool forceActivateStream = false}) async {
    if (!mounted) return;

    debugPrint('üîç Inicializando c√¢mera');

    try {
      // Verificar se estamos no Android e se precisamos for√ßar a limpeza de receivers
      if (Platform.isAndroid) {
        // For√ßar libera√ß√£o de receivers antigos atrav√©s de GC
        try {
          await SystemChannels.platform
              .invokeMethod<void>('SystemNavigator.routeUpdated');
          await Future.delayed(const Duration(milliseconds: 300));
        } catch (e) {
          debugPrint('‚ö†Ô∏è Aviso ao tentar liberar recursos do sistema: $e');
        }
      }

      // Verificar permiss√µes de c√¢mera
      final status = await Permission.camera.status;
      if (!status.isGranted) {
        final result = await Permission.camera.request();
        if (!result.isGranted) {
          throw Exception('Permiss√£o de c√¢mera negada pelo usu√°rio');
        }
      }

      // Obter c√¢meras dispon√≠veis com timeout
      _cameras = await availableCameras().timeout(
        const Duration(seconds: 3),
        onTimeout: () {
          throw TimeoutException('Timeout ao obter c√¢meras dispon√≠veis');
        },
      );

      if (_cameras == null || _cameras!.isEmpty) {
        throw Exception('Nenhuma c√¢mera dispon√≠vel no dispositivo');
      }

      // Encontrar c√¢mera traseira (preferida)
      int cameraIndex =
          0; // Se n√£o encontrar a traseira, usa a primeira dispon√≠vel

      // Tentar encontrar a c√¢mera traseira
      for (int i = 0; i < _cameras!.length; i++) {
        if (_cameras![i].lensDirection == preferredCameraDirection) {
          cameraIndex = i;
          break;
        }
      }

      // Criar controlador da c√¢mera com configura√ß√µes otimizadas
      final ResolutionPreset resolutionPreset = ResolutionPreset.medium;

      // Verifica√ß√£o de seguran√ßa para evitar Too many receivers
      if (_cameras!.length <= cameraIndex) {
        cameraIndex = 0; // Usar a primeira c√¢mera se o √≠ndice for inv√°lido
      }

      // Cria√ß√£o segura do controlador
      try {
        // Verificar se o √≠ndice √© v√°lido
        if (_cameras!.isEmpty) {
          throw Exception('Lista de c√¢meras vazia');
        }

        // Criar controlador
        _cameraController = CameraController(
          _cameras![cameraIndex],
          resolutionPreset,
          enableAudio:
              false, // Desativar √°udio para reduzir consumo de recursos
          imageFormatGroup: Platform.isAndroid
              ? ImageFormatGroup.yuv420
              : ImageFormatGroup.bgra8888,
        );

        // Inicializar com timeout
        await _cameraController!.initialize().timeout(
          const Duration(seconds: 5),
          onTimeout: () {
            throw TimeoutException('Timeout ao inicializar c√¢mera');
          },
        );

        // Configura√ß√µes adicionais ap√≥s inicializa√ß√£o bem-sucedida
        if (_cameraController!.value.isInitialized) {
          // Configurar foco e exposi√ß√£o para melhor detec√ß√£o de QR
          await _cameraController!.setFocusMode(FocusMode.auto);
          await _cameraController!.setExposureMode(ExposureMode.auto);

          // For√ßar um frame para garantir que o stream est√° ativo
          if (forceActivateStream) {
            try {
              // Tirar uma foto "fantasma" para ativar o stream
              await _cameraController!.takePicture();
            } catch (e) {
              debugPrint('‚ö†Ô∏è Erro ao ativar stream (esperado): $e');
              // Ignorar erro aqui, pois √© apenas para ativar o stream
            }
          }

          // Sinalizar que a c√¢mera est√° inicializada
          _isCameraInitialized = true;

          debugPrint('‚úÖ C√¢mera inicializada com sucesso');
          return;
        } else {
          throw Exception('C√¢mera n√£o inicializada corretamente');
        }
      } catch (e) {
        // Verificar especificamente por erro de Too many receivers
        if (e.toString().contains('Too many receivers')) {
          _hasTooManyReceiversError = true;
          debugPrint('üö® Erro de Too many receivers detectado');

          // For√ßar limpeza imediata de recursos
          await _forceCameraInitialization();

          throw Exception(
              'Muitos receptores registrados. Reinicie o aplicativo para usar a c√¢mera.');
        }

        debugPrint('‚ùå Erro ao criar controlador da c√¢mera: $e');
        throw e; // Repassar erro para tratamento na fun√ß√£o chamadora
      }
    } catch (e) {
      debugPrint('‚ùå Erro durante inicializa√ß√£o da c√¢mera: $e');

      // Verificar por erro de Too many receivers em qualquer ponto
      if (e.toString().contains('Too many receivers')) {
        _hasTooManyReceiversError = true;
      }

      // Limpar recursos em caso de falha
      try {
        await _safeDisposeControllersCompletely();
      } catch (disposeError) {
        debugPrint('‚ö†Ô∏è Erro ao liberar recursos ap√≥s falha: $disposeError');
      }

      // Repassar erro
      throw e;
    }
  }

  // M√©todo para for√ßar reinicializa√ß√£o da c√¢mera em caso de problemas
  Future<void> _forceCameraInitialization() async {
    debugPrint('üîÑ For√ßando reinicializa√ß√£o da c√¢mera');

    try {
      // 1. Liberar todos os recursos
      await _safeDisposeControllersCompletely();

      // 2. For√ßar coleta de lixo
      await SystemChannels.platform
          .invokeMethod<void>('SystemNavigator.routeUpdated');

      // 3. Pequena pausa para dar tempo ao sistema
      await Future.delayed(const Duration(milliseconds: 500));

      // 4. Usar m√©todo alternativo para inicializar c√¢mera (apenas no Android)
      if (Platform.isAndroid) {
        try {
          // Tentar usar m√©todo alternativo para obter c√¢meras
          final tempController = CameraController(
            const CameraDescription(
              name: '0',
              lensDirection: CameraLensDirection.back,
              sensorOrientation: 90,
            ),
            ResolutionPreset.low,
            enableAudio: false,
          );

          // Inicializar e depois liberar imediatamente
          try {
            await tempController.initialize().timeout(
              const Duration(seconds: 2),
              onTimeout: () {
                throw TimeoutException('Timeout na inicializa√ß√£o for√ßada');
              },
            );
          } catch (e) {
            debugPrint('‚ö†Ô∏è Erro esperado na inicializa√ß√£o for√ßada: $e');
          } finally {
            await tempController.dispose();
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è Erro no m√©todo alternativo (esperado): $e');
        }
      }

      // 5. Outra pausa para garantir
      await Future.delayed(const Duration(milliseconds: 200));

      debugPrint('‚úÖ Reinicializa√ß√£o for√ßada conclu√≠da');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erro durante reinicializa√ß√£o for√ßada: $e');
    }
  }

  // Dispose completo de todos os controladores e recursos
  Future<void> _safeDisposeControllersCompletely() async {
    debugPrint('üßπ Limpando completamente todos os recursos da c√¢mera');

    try {
      // 1. Limpar controlador QR
      if (_qrController != null) {
        final tempQR = _qrController;
        _qrController = null;
        try {
          await tempQR?.stop();
          await tempQR?.dispose();
        } catch (e) {
          debugPrint('‚ö†Ô∏è Erro ao limpar controlador QR: $e');
        }
      }

      // 2. Limpar controlador da c√¢mera
      if (_cameraController != null) {
        final tempCamera = _cameraController;
        _cameraController = null;
        try {
          if (tempCamera!.value.isInitialized) {
            await tempCamera.dispose();
          }
        } catch (e) {
          debugPrint('‚ö†Ô∏è Erro ao limpar controlador da c√¢mera: $e');
        }
      }

      // 3. Limpar outras refer√™ncias
      _cameras = null;

      // Redefinir flags
      _isQRScannerReady = false;
      _isCameraInitialized = false;
      _previewReady = false;

      // 4. Pequeno delay para garantir que tudo foi limpo
      await Future.delayed(const Duration(milliseconds: 300));

      // 5. For√ßar chamada ao garbage collector
      await SystemChannels.platform
          .invokeMethod<void>('SystemNavigator.routeUpdated');

      debugPrint('‚úÖ Todos os recursos foram liberados');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erro durante limpeza completa: $e');
    }
  }

  @override
  void dispose() {
    debugPrint('üîÑ Dispose do widget');
    // Marcar esta inst√¢ncia como n√£o mais ativa
    _isInstanceActive = false;

    // Cancelar timer de inatividade
    _inactivityTimer?.cancel();

    WidgetsBinding.instance.removeObserver(this);

    // Usar a vers√£o segura do dispose
    _safeDisposeControllersCompletely();

    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    debugPrint('üì± Estado do ciclo de vida mudou para: $state');

    // Se o app for minimizado ou pausado, fechar automaticamente a c√¢mera
    if (state == AppLifecycleState.paused ||
        state == AppLifecycleState.inactive ||
        state == AppLifecycleState.detached) {
      // Liberar recursos imediatamente
      _safeDisposeControllersCompletely();

      // Se o app for minimizado, fechar tela da c√¢mera
      if (mounted &&
          (state == AppLifecycleState.paused ||
              state == AppLifecycleState.detached)) {
        debugPrint(
            'üì± App minimizado ou desanexado - fechando c√¢mera automaticamente');
        // Fechar a tela ap√≥s um curto atraso
        Future.delayed(const Duration(milliseconds: 200), () {
          if (mounted) {
            Navigator.of(context).pop();
          }
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    // Resetar timer de inatividade sempre que o usu√°rio interagir
    _resetInactivityTimer();

    return WillPopScope(
      // Interceptar o bot√£o de voltar para garantir a limpeza de recursos
      onWillPop: () async {
        // Limpar recursos antes de sair
        await _safeDisposeControllersCompletely();
        return true;
      },
      child: Scaffold(
        backgroundColor: Colors.black,
        appBar: AppBar(
          backgroundColor: Colors.transparent,
          title: Text(_hasTooManyReceiversError
              ? 'Erro - Reinicie o Aplicativo'
              : 'Tirar Foto'),
          leading: IconButton(
            icon: const Icon(Icons.arrow_back),
            onPressed: () async {
              // Limpar recursos antes de sair
              await _safeDisposeControllersCompletely();
              Navigator.pop(context);
            },
          ),
        ),
        body: _buildBody(),
      ),
    );
  }

  // M√©todo para construir o corpo baseado no estado atual
  Widget _buildBody() {
    // Verificar se h√° erro de excesso de receivers
    if (_hasTooManyReceiversError) {
      return Center(
        child: Padding(
          padding: const EdgeInsets.all(20),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Icon(Icons.error_outline, color: Colors.red, size: 60),
              const SizedBox(height: 20),
              const Text(
                'Limite de recursos excedido',
                style: TextStyle(
                    color: Colors.white,
                    fontSize: 22,
                    fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 20),
              const Text(
                'O aplicativo precisa ser reiniciado para usar a c√¢mera. '
                'Por favor, feche completamente o aplicativo e abra-o novamente.',
                style: TextStyle(color: Colors.white, fontSize: 16),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 30),
              ElevatedButton.icon(
                icon: const Icon(Icons.close),
                label: const Text('Fechar'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.red,
                  foregroundColor: Colors.white,
                  padding:
                      const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                ),
                onPressed: () {
                  Navigator.pop(context);
                },
              ),
            ],
          ),
        ),
      );
    }

    // Verificar se h√° erro gen√©rico de c√¢mera
    if (_hasCameraError) {
      return Center(
        child: Padding(
          padding: const EdgeInsets.all(20),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Icon(Icons.error_outline, color: Colors.red, size: 60),
              const SizedBox(height: 20),
              const Text(
                'Erro ao inicializar c√¢mera',
                style: TextStyle(
                    color: Colors.white,
                    fontSize: 22,
                    fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 20),
              const Text(
                'N√£o foi poss√≠vel inicializar a c√¢mera. Verifique se outra aplica√ß√£o '
                'est√° usando a c√¢mera ou tente reiniciar o aplicativo.',
                style: TextStyle(color: Colors.white, fontSize: 16),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 30),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  ElevatedButton.icon(
                    icon: const Icon(Icons.refresh),
                    label: const Text('Tentar Novamente'),
                    style: ElevatedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 20, vertical: 12),
                    ),
                    onPressed: () {
                      setState(() {
                        _hasCameraError = false;
                        _initAttempts = 0;
                      });
                      _initializeCameraWithRetry();
                    },
                  ),
                  const SizedBox(width: 16),
                  ElevatedButton.icon(
                    icon: const Icon(Icons.close),
                    label: const Text('Fechar'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.red[400],
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(
                          horizontal: 20, vertical: 12),
                    ),
                    onPressed: () {
                      Navigator.pop(context);
                    },
                  ),
                ],
              ),
            ],
          ),
        ),
      );
    }

    // Verificar se est√° processando
    if (_isProcessing) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CircularProgressIndicator(color: Colors.white),
            SizedBox(height: 20),
            Text(
              'Inicializando c√¢mera...',
              style: TextStyle(color: Colors.white, fontSize: 16),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      );
    }

    // Construir visualiza√ß√£o da c√¢mera quando estiver pronta
    if (_isCameraInitialized && _cameraController != null) {
      return Column(
        children: [
          Expanded(
            child: ClipRRect(
              borderRadius: BorderRadius.circular(12),
              child: Container(
                key: _cameraPreviewKey,
                child: CameraPreview(_cameraController!),
              ),
            ),
          ),
          // Bot√£o para tirar foto
          Container(
            padding: const EdgeInsets.all(20),
            color: Colors.black,
            child: Center(
              child: GestureDetector(
                onTap: _takePicture,
                child: Container(
                  width: 70,
                  height: 70,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    border: Border.all(color: Colors.white, width: 4),
                  ),
                  child: const Center(
                    child: Icon(
                      Icons.camera_alt,
                      color: Colors.white,
                      size: 40,
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      );
    }

    // Caso padr√£o quando ainda n√£o est√° pronto
    return const Center(
      child: Text(
        'Inicializando c√¢mera...',
        style: TextStyle(color: Colors.white),
      ),
    );
  }

  // Captura uma foto
  Future<void> _takePicture() async {
    if (_isProcessing || !_isCameraInitialized || _cameraController == null) {
      _showError('A c√¢mera n√£o est√° pronta para tirar fotos.');
      return;
    }

    setState(() => _isProcessing = true);
    String? imagePath;

    try {
      // Feedback t√°til
      HapticFeedback.mediumImpact();

      // Capturar foto
      final XFile photo = await _cameraController!.takePicture();
      imagePath = photo.path;

      debugPrint('üì∏ Foto capturada: $imagePath');

      // Analisar QR code na imagem
      String? qrCode;
      try {
        final analyzeController = MobileScannerController();
        final barcodes = await analyzeController.analyzeImage(imagePath);
        await analyzeController.dispose();

        if (barcodes?.barcodes.isNotEmpty ?? false) {
          qrCode = barcodes?.barcodes.first.rawValue;
          debugPrint('‚úÖ QR code detectado: $qrCode');
        }
      } catch (e) {
        debugPrint('‚ùå Erro ao analisar QR code: $e');
      }

      // Fechar tela e retornar resultado
      if (mounted) {
        if (qrCode != null) {
          Navigator.pop(context,
              {'type': 'qrcode', 'data': qrCode, 'imagePath': imagePath});
        } else {
          Navigator.pop(context, {'type': 'photo', 'data': imagePath});
        }
      }
    } catch (e, stackTrace) {
      debugPrint('‚ùå Erro ao capturar foto: $e');

      // Registrar no Logger em vez do Sentry diretamente
      await Logger.captureException(
        e,
        stackTrace: stackTrace,
        category: 'photo_capture',
        extra: {'image_path': imagePath},
      );

      if (mounted) {
        setState(() => _isProcessing = false);
        _showError('Erro ao capturar foto: ${e.toString().split('\n').first}');
      }
    }
  }

  // Verificar permiss√µes da c√¢mera
  Future<void> _checkCameraPermissions() async {
    try {
      final status = await Permission.camera.status;
      if (!status.isGranted) {
        final result = await Permission.camera.request();
        if (!result.isGranted) {
          throw Exception('Permiss√£o da c√¢mera negada');
        }
      }
    } catch (e) {
      debugPrint('‚ùå Erro ao verificar permiss√µes: $e');
      rethrow;
    }
  }

  // Verificar e garantir que o preview seja exibido corretamente
  Future<void> _ensurePreviewIsVisible() async {
    if (!mounted || _previewReady || _attemptingPreviewFix) return;

    debugPrint('üîç Verificando visibilidade do preview da c√¢mera');

    // Se a c√¢mera est√° inicializada mas o preview n√£o est√° vis√≠vel
    if (_isCameraInitialized &&
        _cameraController != null &&
        _cameraController!.value.isInitialized &&
        !_isQRMode) {
      // Tentar for√ßar uma atualiza√ß√£o do preview
      await Future.delayed(const Duration(milliseconds: 200));

      if (mounted) {
        // For√ßar rebuild da UI
        setState(() {
          _previewReady = true;
        });

        // Para ter certeza, realiza uma segunda atualiza√ß√£o ap√≥s um curto atraso
        Future.delayed(const Duration(milliseconds: 300), () {
          if (mounted) {
            setState(() {});

            // Verificar se precisa "cutucar" na c√¢mera para ativar o stream
            if (_cameraController != null &&
                _cameraController!.value.isInitialized) {
              // Em vez de usar setResolutionPreset que n√£o existe, vamos usar m√©todos v√°lidos
              try {
                // Alternar modos de foco e exposi√ß√£o pode ajudar a ativar o stream
                _cameraController!.setFocusMode(FocusMode.auto).then((_) {
                  _cameraController!.setExposureMode(ExposureMode.auto);

                  // Para garantir que o stream est√° ativo, fazer mais uma atualiza√ß√£o
                  if (mounted) setState(() {});
                });
              } catch (e) {
                debugPrint('‚ö†Ô∏è Erro ao ajustar configura√ß√µes da c√¢mera: $e');
              }
            }
          }
        });
      }
    } else {
      // Se ainda n√£o est√° pronto, tentar novamente ap√≥s um atraso
      Future.delayed(const Duration(milliseconds: 500), () {
        if (mounted && !_previewReady && !_attemptingPreviewFix) {
          _ensurePreviewIsVisible();
        }
      });
    }
  }
}
