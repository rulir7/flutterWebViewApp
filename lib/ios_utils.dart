import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:camera/camera.dart';
import './logger.dart';

/// Utilit√°rios espec√≠ficos para iOS
class IOSUtils {
  /// Configura a c√¢mera para comportamento ideal no iOS
  static Future<void> setupCameraForIOS(CameraController controller) async {
    if (!Platform.isIOS) return;

    try {
      // Configurar modo de foco para comportamento ideal no iOS
      await controller.setFocusMode(FocusMode.auto);

      // Configurar modo de exposi√ß√£o para comportamento ideal no iOS
      await controller.setExposureMode(ExposureMode.auto);

      // Ativar flash autom√°tico se dispon√≠vel
      if (controller.value.flashMode != null) {
        await controller.setFlashMode(FlashMode.auto);
      }

      // Configura√ß√µes espec√≠ficas para iOS s√£o efetivamente aplicadas
      debugPrint('‚úÖ Configura√ß√µes espec√≠ficas do iOS aplicadas √† c√¢mera');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erro ao configurar c√¢mera para iOS: $e');
    }
  }

  /// Ajusta a orienta√ß√£o da c√¢mera com base na orienta√ß√£o do dispositivo
  static Future<void> adjustCameraOrientation(
      CameraController controller, Orientation deviceOrientation) async {
    if (!Platform.isIOS) return;

    try {
      // No iOS, √†s vezes precisamos ajustar a orienta√ß√£o manualmente
      DeviceOrientation orientation;

      switch (deviceOrientation) {
        case Orientation.portrait:
          orientation = DeviceOrientation.portraitUp;
          break;
        case Orientation.landscape:
          // Determinar se √© landscape left ou right com base na orienta√ß√£o do sensor
          orientation = DeviceOrientation.landscapeRight;
          break;
        default:
          orientation = DeviceOrientation.portraitUp;
      }

      await controller.lockCaptureOrientation(orientation);
      debugPrint('üì± iOS: Orienta√ß√£o da c√¢mera ajustada para: $orientation');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erro ao ajustar orienta√ß√£o da c√¢mera no iOS: $e');
    }
  }

  /// Notifica o sistema para liberar recursos
  static Future<void> releaseSystemResources() async {
    if (!Platform.isIOS) return;

    try {
      // No iOS, podemos sugerir ao sistema que colete recursos n√£o utilizados
      await SystemChannels.platform.invokeMethod<void>('System.gc');
      debugPrint('üßπ iOS: Solicita√ß√£o de libera√ß√£o de recursos enviada');
    } catch (e) {
      // Ignora o erro, pois isso √© apenas uma sugest√£o ao sistema
      debugPrint('‚ÑπÔ∏è iOS: Libera√ß√£o de recursos ignorada: $e');
    }
  }

  /// Prepara a c√¢mera para captura de imagem no iOS
  static Future<void> prepareImageCaptureForIOS(
      CameraController controller) async {
    if (!Platform.isIOS) return;

    try {
      // No iOS, bloquear o foco antes de capturar pode melhorar a qualidade
      await controller.setFocusMode(FocusMode.locked);

      // Pequeno delay para estabilizar o foco antes da captura
      await Future.delayed(const Duration(milliseconds: 200));

      debugPrint('üì∏ iOS: C√¢mera preparada para captura');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erro ao preparar captura no iOS: $e');
    }
  }

  /// Restaura configura√ß√µes da c√¢mera ap√≥s captura
  static Future<void> resetCameraAfterCapture(
      CameraController controller) async {
    if (!Platform.isIOS) return;

    try {
      // Restaurar modos autom√°ticos ap√≥s a captura
      await controller.setFocusMode(FocusMode.auto);
      await controller.setExposureMode(ExposureMode.auto);

      debugPrint('üîÑ iOS: C√¢mera restaurada ap√≥s captura');
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erro ao restaurar c√¢mera no iOS: $e');
    }
  }

  /// Detecta problemas de compatibilidade espec√≠ficos do iOS
  static bool detectIOSCompatibilityIssues() {
    if (!Platform.isIOS) return false;

    try {
      // Verificar se estamos no iOS 14 ou superior (melhor compatibilidade)
      final String version = Platform.operatingSystemVersion;
      final bool isIOS14OrHigher = version.contains('14.') ||
          version.contains('15.') ||
          version.contains('16.') ||
          version.contains('17.');

      if (!isIOS14OrHigher) {
        debugPrint('‚ö†Ô∏è iOS: Vers√£o anterior ao iOS 14 detectada: $version');
        Logger.warning('Vers√£o de iOS potencialmente incompat√≠vel',
            category: 'ios_compatibility', extra: {'version': version});
        return true;
      }

      return false;
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erro ao verificar compatibilidade do iOS: $e');
      return false;
    }
  }

  /// Otimiza o desempenho ap√≥s troca de orienta√ß√£o
  static Future<void> optimizeAfterOrientationChange() async {
    if (!Platform.isIOS) return;

    try {
      // No iOS, for√ßar um pequeno delay e limpar mem√≥ria ap√≥s mudan√ßa de orienta√ß√£o
      // pode ajudar a evitar problemas de renderiza√ß√£o
      await Future.delayed(const Duration(milliseconds: 300));

      // Sugerir ao sistema para liberar recursos n√£o utilizados
      await SystemChannels.platform.invokeMethod<void>('System.gc');

      // Tamb√©m podemos for√ßar uma atualiza√ß√£o do layout
      WidgetsBinding.instance.performReassemble();

      debugPrint('üîÑ iOS: Layout reajustado ap√≥s mudan√ßa de orienta√ß√£o');
    } catch (e) {
      debugPrint(
          '‚ö†Ô∏è Erro ao otimizar layout ap√≥s mudan√ßa de orienta√ß√£o no iOS: $e');
    }
  }
}
